from pydantic import BaseModel
from typing import Optional

# Shared properties that are common to all item-related schemas.
class ItemBase(BaseModel):
    title: str
    description: Optional[str] = None


# Properties to receive via API on creation.
# It inherits from ItemBase, so it has title and description.
class ItemCreate(ItemBase):
    pass

class ItemUpdate(ItemBase):
    completed: Optional[bool] = None


# Properties to return to the client via API.
# It includes all the base fields plus the ones generated by the database.
class Item(ItemBase):
    id: int
    completed: bool

    # Pydantic's config class to configure its behavior.
    class Config:
        # This tells Pydantic to read data even if it's not a dict,
        # but an ORM model (or any other arbitrary object with attributes).
        from_attributes = True